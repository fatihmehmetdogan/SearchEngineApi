{% extends 'base.html.twig' %}

{% block title %}Arama Motoru Dashboard{% endblock %}

{% block body %}
    <div class="container mt-4">
        <div class="row">
            <div class="col-md-12">
                <h1 class="mb-4">Arama Motoru Dashboard</h1>

                {# Arama Formu #}
                <div class="card mb-4">
                    <div class="card-body">
                        <form id="searchForm">
                            <div class="row">
                                <div class="col-md-6">
                                    <input type="text" class="form-control" id="searchQuery" placeholder="Arama terimi girin...">
                                </div>
                                <div class="col-md-3">
                                    <select class="form-control" id="contentType">
                                        <option value="">T√ºm T√ºrler</option>
                                        <option value="video">Video</option>
                                        <option value="text">Metin</option>
                                    </select>
                                </div>
                                <div class="col-md-3">
                                    <button type="submit" class="btn btn-primary btn-block">Ara</button>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>

                {# Sonu√ßlar #}
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Arama Sonu√ßlarƒ±</h5>
                        <div>
                            <select id="sortBy" class="form-control form-control-sm">
                                <option value="finalScore">Skor (Y√ºksek ‚Üí D√º≈ü√ºk)</option>
                                <option value="createdAt">Tarih (Yeni ‚Üí Eski)</option>
                                <option value="title">Ba≈ülƒ±k (A ‚Üí Z)</option>
                            </select>
                            <select id="sortOrder" class="form-control form-control-sm ms-2">
                                <option value="desc">Azalan</option>
                                <option value="asc">Artan</option>
                            </select>
                        </div>
                    </div>
                    <div class="card-body">
                        <div id="loading" class="text-center" style="display: none;">
                            <div class="spinner-border" role="status">
                                <span class="sr-only">Y√ºkleniyor...</span>
                            </div>
                        </div>

                        <div id="results">
                            <p class="text-muted">Arama yapmak i√ßin yukarƒ±daki formu kullanƒ±n.</p>
                        </div>

                        <nav id="pagination" style="display: none;">
                            <ul class="pagination justify-content-center">
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
    </div>

    {# Detay Modalƒ± (Pop-up) #}
    <div class="modal fade" id="documentDetailModal" tabindex="-1" aria-labelledby="documentDetailModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="documentDetailModalLabel">Dok√ºman Detaylarƒ±</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <h4 id="detailTitle"></h4>
                    <p class="text-muted"><small>Kategori: <span id="detailCategory"></span> | Yayƒ±nlanma: <span id="detailPublishedAt"></span></small></p>
                    <p id="detailContent"></p>
                    <div class="row text-center mt-3">
                        <div class="col-md-6">
                            <p class="mb-0"><small><strong>Skor:</strong> <span id="detailScore"></span></small></p>
                        </div>
                        <div class="col-md-6">
                            <p class="mb-0"><small><strong>Tip:</strong> <span id="detailType"></span></small></p>
                        </div>
                    </div>
                    <div class="row text-center mt-2" id="detailMetrics">
                        {# Metrikler buraya JS ile y√ºklenecek #}
                    </div>
                    <p class="mt-3"><small>Etiketler: <span id="detailTags"></span></small></p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Kapat</button>
                    <button type="button" class="btn btn-success" id="detailLikeButton">‚ù§Ô∏è Beƒüen (<span id="detailLikesCount">0</span>)</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const searchForm = document.getElementById('searchForm');
            const loadingDiv = document.getElementById('loading');
            const resultsDiv = document.getElementById('results');
            const sortSelect = document.getElementById('sortBy');
            const sortOrderSelect = document.getElementById('sortOrder');

            const detailModal = new bootstrap.Modal(document.getElementById('documentDetailModal'));
            const detailTitle = document.getElementById('detailTitle');
            const detailCategory = document.getElementById('detailCategory');
            const detailPublishedAt = document.getElementById('detailPublishedAt');
            const detailContent = document.getElementById('detailContent');
            const detailScore = document.getElementById('detailScore');
            const detailType = document.getElementById('detailType');
            const detailMetrics = document.getElementById('detailMetrics');
            const detailTags = document.getElementById('detailTags');
            const detailLikeButton = document.getElementById('detailLikeButton');
            const detailLikesCount = document.getElementById('detailLikesCount');

            let currentQuery = '';
            let currentPage = 1;
            let currentType = '';
            let currentSortBy = 'finalScore';
            let currentSortOrder = 'desc';

            let currentDocumentId = null; // Detayƒ± a√ßƒ±lan dok√ºman ID'si

            searchForm.addEventListener('submit', function(e) {
                e.preventDefault();
                currentQuery = document.getElementById('searchQuery').value;
                currentType = document.getElementById('contentType').value;
                currentPage = 1;
                performSearch();
            });

            sortSelect.addEventListener('change', function() {
                currentSortBy = sortSelect.value;
                performSearch();
            });

            sortOrderSelect.addEventListener('change', function() {
                currentSortOrder = sortOrderSelect.value;
                performSearch();
            });

            performSearch(); // ƒ∞lk y√ºklemede t√ºm sonu√ßlarƒ± g√∂stermek i√ßin


            function performSearch() {
                loadingDiv.style.display = 'block';
                resultsDiv.innerHTML = '';

                const params = new URLSearchParams({
                    q: currentQuery,
                    page: currentPage,
                    limit: 10,
                    sort: currentSortBy,
                    order: currentSortOrder
                });

                if (currentType) {
                    params.append('type', currentType);
                }

                fetch(`/api/search?${params}`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        loadingDiv.style.display = 'none';
                        displayResults(data);
                        setupPagination(data.meta);
                    })
                    .catch(error => {
                        loadingDiv.style.display = 'none';
                        resultsDiv.innerHTML = `<div class="alert alert-danger">Arama sƒ±rasƒ±nda bir hata olu≈ütu: ${error.message}</div>`;
                        console.error('Search error:', error);
                    });
            }

            function displayResults(data) {
                if (!data.data || data.data.length === 0) {
                    resultsDiv.innerHTML = '<div class="alert alert-info">Sonu√ß bulunamadƒ±.</div>';
                    return;
                }

                let html = '<div class="row">';

                data.data.forEach(item => {
                    const cardId = `document-card-${item.id}`;
                    const typeIcon = item.type === 'video' ? 'üé•' : 'üìÑ';
                    const typeBadge = item.type === 'video' ? 'bg-primary' : 'bg-secondary';
                    const formattedDate = item.publishedAt ? new Date(item.publishedAt).toLocaleDateString('tr-TR') : 'Bilinmiyor';

                    html += `
                        <div class="col-md-6 mb-3">
                            <div class="card h-100" id="${cardId}" data-document-id="${item.id}" data-document-type="${item.type}">
                                <div class="card-body">
                                    <div class="d-flex justify-content-between align-items-start mb-2">
                                        <h6 class="card-title">
                                            <a href="#" class="text-decoration-none text-dark document-title" data-id="${item.id}">
                                                ${typeIcon} ${item.title || 'Ba≈ülƒ±k Yok'}
                                            </a>
                                        </h6>
                                        <div>
                                            <span class="badge ${typeBadge}">${item.type || 'Bilinmiyor'}</span>
                                            <span class="badge bg-success ms-1 card-score">Skor: ${parseFloat(item.finalScore).toFixed(2)}</span>
                                        </div>
                                    </div>
                                    <p class="card-text text-muted small">${(item.content || '').substring(0, 100)}...</p>
                                    <p class="card-text small">Yayƒ±nlanma Tarihi: ${formattedDate}</p>
                                    <div class="row text-center mt-2">
                                        ${item.type === 'video' ? `
                                            <div class="col-6"><small><strong>G√∂r√ºnt√ºlenme:</strong> <span class="card-views-count">${item.views || 0}</span></small></div>
                                            <div class="col-6"><small><strong>Beƒüeni:</strong> <span class="card-likes-count">${item.likes || 0}</span></small></div>
                                        ` : `
                                            <div class="col-6"><small><strong>Okuma S√ºresi:</strong> ${item.readingTime || 0} dk</small></div>
                                            <div class="col-6"><small><strong>Reaksiyon:</strong> <span class="card-reactions-count">${item.reactions || 0}</span></small></div>
                                        `}
                                    </div>
                                    <button class="btn btn-sm btn-outline-primary mt-2 view-detail-button" data-id="${item.id}">Detayƒ± G√∂r√ºnt√ºle</button>
                                </div>
                            </div>
                        </div>
                    `;
                });

                html += '</div>';
                resultsDiv.innerHTML = html;

                document.querySelectorAll('.document-title, .view-detail-button').forEach(button => {
                    button.addEventListener('click', function(e) {
                        e.preventDefault();
                        const docId = this.dataset.id;
                        fetchDocumentDetail(docId);
                    });
                });
            }

            function fetchDocumentDetail(id) {
                fetch(`/api/documents/${id}`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(item => {
                        currentDocumentId = item.id;

                        detailTitle.textContent = item.title || 'Ba≈ülƒ±k Yok';
                        detailCategory.textContent = item.category || 'Yok';
                        detailPublishedAt.textContent = item.publishedAt ? new Date(item.publishedAt).toLocaleDateString('tr-TR') : 'Bilinmiyor';
                        detailContent.textContent = item.content || 'ƒ∞√ßerik Yok';
                        detailScore.textContent = parseFloat(item.finalScore).toFixed(2);
                        detailType.textContent = item.type || 'Bilinmiyor';
                        detailTags.textContent = (item.tags && item.tags.length > 0) ? item.tags.join(', ') : 'Yok';

                        let metricsHtml = '';
                        if (item.type === 'video') {
                            metricsHtml = `
                                <div class="col-6"><small><strong>G√∂r√ºnt√ºlenme:</strong> ${item.views || 0}</small></div>
                                <div class="col-6"><small><strong>Beƒüeni:</strong> ${item.likes || 0}</small></div>
                            `;
                        } else {
                            metricsHtml = `
                                <div class="col-6"><small><strong>Okuma S√ºresi:</strong> ${item.readingTime || 0} dk</small></div>
                                <div class="col-6"><small><strong>Reaksiyon:</strong> ${item.reactions || 0}</small></div>
                            `;
                        }
                        detailMetrics.innerHTML = metricsHtml;

                        detailLikesCount.textContent = item.likes || 0;
                        detailLikeButton.dataset.id = item.id;

                        // Ana dashboard kartƒ±ndaki metrikleri g√ºncelle (g√∂r√ºnt√ºleme sonrasƒ±)
                        updateCardMetrics(
                            item.id,
                            item.views, // <<<--- BURADA newViews olarak g√∂nderiliyor
                            item.likes,
                            item.reactions,
                            item.finalScore,
                            item.type
                        );

                        detailModal.show();
                    })
                    .catch(error => {
                        console.error(`Dok√ºman detayƒ± √ßekme hatasƒ± (ID: ${id}):`, error);
                        alert('Dok√ºman detaylarƒ± y√ºklenirken bir hata olu≈ütu. Konsolu kontrol edin.');
                    });
            }

            detailLikeButton.addEventListener('click', function() {
                if (!currentDocumentId) {
                    console.error('Beƒüenme i≈ülemi i√ßin dok√ºman ID bulunamadƒ±.');
                    return;
                }
                fetch(`/api/documents/${currentDocumentId}/like`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        // Modal i√ßindeki deƒüerleri g√ºncelle
                        detailLikesCount.textContent = data.new_likes;
                        detailScore.textContent = parseFloat(data.new_score).toFixed(2);

                        // Ana dashboard kartƒ±ndaki skoru ve beƒüeniyi/reaksiyonu da g√ºncelle
                        const cardElement = document.getElementById(`document-card-${currentDocumentId}`);
                        if (cardElement) {
                            const documentType = cardElement.dataset.documentType;
                            updateCardMetrics(
                                currentDocumentId,
                                null, // Views deƒüi≈ümediƒüi i√ßin null
                                data.new_likes,
                                data.new_reactions, // Reaksiyonlar da g√ºncellenmeli
                                data.new_score,
                                documentType
                            );
                        }
                        console.log('Dok√ºman beƒüenildi:', data);
                    })
                    .catch(error => {
                        console.error('Beƒüenme hatasƒ±:', error);
                        alert('Beƒüenme i≈ülemi sƒ±rasƒ±nda bir hata olu≈ütu.');
                    });
            });

            function updateCardMetrics(docId, newViews, newLikes, newReactions, newScore, docType) {
                const cardElement = document.getElementById(`document-card-${docId}`);
                if (!cardElement) return;

                const scoreSpan = cardElement.querySelector('.card-score');
                if (scoreSpan && newScore !== null) {
                    scoreSpan.textContent = `Skor: ${parseFloat(newScore).toFixed(2)}`;
                }

                if (docType === 'video') {
                    const viewsSpan = cardElement.querySelector('.card-views-count');
                    const likesSpan = cardElement.querySelector('.card-likes-count');
                    if (viewsSpan && newViews !== null) {
                        viewsSpan.textContent = newViews;
                    }
                    if (likesSpan && newLikes !== null) {
                        likesSpan.textContent = newLikes;
                    }
                } else { // text
                    const reactionsSpan = cardElement.querySelector('.card-reactions-count');
                    if (reactionsSpan && newReactions !== null) { // Text i√ßin reaksiyonlarƒ± g√ºncelle
                        reactionsSpan.textContent = newReactions;
                    }
                }
            }


            // Sayfalama fonksiyonu
            function setupPagination(meta) {
                const paginationNav = document.getElementById('pagination');
                const paginationUl = paginationNav.querySelector('ul');
                paginationUl.innerHTML = '';

                if (meta.pages <= 1) {
                    paginationNav.style.display = 'none';
                    return;
                }
                paginationNav.style.display = 'block';

                const maxPagesToShow = 5;
                let startPage = Math.max(1, meta.page - Math.floor(maxPagesToShow / 2));
                let endPage = Math.min(meta.pages, startPage + maxPagesToShow - 1);

                // Eƒüer son sayfalara yakƒ±nsak, ba≈ülangƒ±cƒ± ayarla
                if (endPage - startPage + 1 < maxPagesToShow && meta.pages > maxPagesToShow) {
                    startPage = Math.max(1, endPage - maxPagesToShow + 1);
                }

                if (startPage > 1) {
                    paginationUl.innerHTML += `<li class="page-item"><a class="page-link" href="#" data-page="1">ƒ∞lk</a></li>`;
                    if (startPage > 2) {
                        paginationUl.innerHTML += `<li class="page-item disabled"><a class="page-link" href="#">...</a></li>`;
                    }
                }

                for (let i = startPage; i <= endPage; i++) {
                    paginationUl.innerHTML += `
                        <li class="page-item ${meta.page === i ? 'active' : ''}">
                            <a class="page-link" href="#" data-page="${i}">${i}</a>
                        </li>
                    `;
                }

                if (endPage < meta.pages) {
                    if (endPage < meta.pages -1) {
                        paginationUl.innerHTML += `<li class="page-item disabled"><a class="page-link" href="#">...</a></li>`;
                    }
                    paginationUl.innerHTML += `<li class="page-item"><a class="page-link" href="#" data-page="${meta.pages}">Son</a></li>`;
                }


                // √ñnceki/Sonraki butonlarƒ±nƒ± sayfa numaralarƒ±ndan sonra veya √∂nce ekle
                const prevButton = `<li class="page-item ${meta.page === 1 ? 'disabled' : ''}">
                                    <a class="page-link" href="#" data-page="${meta.page - 1}">√ñnceki</a>
                                </li>`;
                const nextButton = `<li class="page-item ${meta.page === meta.pages ? 'disabled' : ''}">
                                    <a class="page-link" href="#" data-page="${meta.page + 1}">Sonraki</a>
                                </li>`;

                paginationUl.innerHTML = prevButton + paginationUl.innerHTML + nextButton;


                // Sayfa butonlarƒ±na tƒ±klama olaylarƒ±
                paginationUl.querySelectorAll('.page-link').forEach(link => {
                    link.addEventListener('click', function(e) {
                        e.preventDefault();
                        const page = parseInt(this.dataset.page);
                        if (!Number.isNaN(page) && page > 0 && page <= meta.pages) {
                            currentPage = page;
                            performSearch();
                        }
                    });
                });
            }
        });
    </script>
{% endblock %}