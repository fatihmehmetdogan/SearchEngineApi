{% extends 'base.html.twig' %}

{% block title %}Arama Motoru Dashboard{% endblock %}

{% block body %}
    <div class="container mt-4">
        <div class="row">
            <div class="col-md-12">
                <h1 class="mb-4">Arama Motoru Dashboard</h1>

                <div class="card mb-4">
                    <div class="card-body">
                        <form id="searchForm">
                            <div class="row">
                                <div class="col-md-6">
                                    <input type="text" class="form-control" id="searchQuery" placeholder="Arama terimi girin...">
                                </div>
                                <div class="col-md-3">
                                    <select class="form-control" id="contentType">
                                        <option value="">TÃ¼m TÃ¼rler</option>
                                        <option value="video">Video</option>
                                        <option value="text">Metin</option>
                                    </select>
                                </div>
                                <div class="col-md-3">
                                    <button type="submit" class="btn btn-primary btn-block">Ara</button>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>

                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Arama SonuÃ§larÄ±</h5>
                        <div>
                            <select id="sortBy" class="form-control form-control-sm">
                                <option value="finalScore">Skor (YÃ¼ksek â†’ DÃ¼ÅŸÃ¼k)</option> {# 'score' yerine 'finalScore' #}
                                <option value="createdAt">Tarih (Yeni â†’ Eski)</option> {# 'created_at' yerine 'createdAt' #}
                                <option value="title">BaÅŸlÄ±k (A â†’ Z)</option>
                            </select>
                            <select id="sortOrder" class="form-control form-control-sm ms-2"> {# Yeni: SÄ±ralama yÃ¶nÃ¼ #}
                                <option value="desc">Azalan</option>
                                <option value="asc">Artan</option>
                            </select>
                        </div>
                    </div>
                    <div class="card-body">
                        <div id="loading" class="text-center" style="display: none;">
                            <div class="spinner-border" role="status">
                                <span class="sr-only">YÃ¼kleniyor...</span>
                            </div>
                        </div>

                        <div id="results">
                            <p class="text-muted">Arama yapmak iÃ§in yukarÄ±daki formu kullanÄ±n.</p>
                        </div>

                        <nav id="pagination" style="display: none;">
                            <ul class="pagination justify-content-center">
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const searchForm = document.getElementById('searchForm');
            const loadingDiv = document.getElementById('loading');
            const resultsDiv = document.getElementById('results');
            const sortSelect = document.getElementById('sortBy');
            const sortOrderSelect = document.getElementById('sortOrder'); // Yeni eklenen sÄ±ralama yÃ¶nÃ¼ select'i

            let currentQuery = '';
            let currentPage = 1;
            let currentType = ''; // 'contentType' yerine 'currentType'
            let currentSortBy = 'finalScore'; // VarsayÄ±lan sÄ±ralama alanÄ±
            let currentSortOrder = 'desc'; // VarsayÄ±lan sÄ±ralama yÃ¶nÃ¼

            // Sayfa yÃ¼klendiÄŸinde veya sÄ±ralama deÄŸiÅŸtiÄŸinde tetiklenecek olaylar
            searchForm.addEventListener('submit', function(e) {
                e.preventDefault();
                currentQuery = document.getElementById('searchQuery').value;
                currentType = document.getElementById('contentType').value;
                currentPage = 1; // Yeni arama yapÄ±ldÄ±ÄŸÄ±nda sayfayÄ± sÄ±fÄ±rla
                performSearch();
            });

            sortSelect.addEventListener('change', function() {
                currentSortBy = sortSelect.value;
                performSearch();
            });

            sortOrderSelect.addEventListener('change', function() { // Yeni: SÄ±ralama yÃ¶nÃ¼ deÄŸiÅŸtiÄŸinde
                currentSortOrder = sortOrderSelect.value;
                performSearch();
            });

            // Ä°lk yÃ¼klemede tÃ¼m sonuÃ§larÄ± gÃ¶stermek iÃ§in
            performSearch();


            function performSearch() {
                loadingDiv.style.display = 'block';
                resultsDiv.innerHTML = ''; // Ã–nceki sonuÃ§larÄ± temizle

                const params = new URLSearchParams({
                    q: currentQuery,
                    page: currentPage,
                    limit: 10,
                    sort: currentSortBy, // 'sortSelect.value' yerine 'currentSortBy'
                    order: currentSortOrder // Yeni: 'order' parametresini ekle
                });

                if (currentType) {
                    params.append('type', currentType); // 'content_type' yerine 'type'
                }

                fetch(`/api/search?${params}`)
                    .then(response => {
                        if (!response.ok) { // HTTP hatasÄ± varsa yakala
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        loadingDiv.style.display = 'none';
                        displayResults(data);
                        // Pagination logic here (if you implement it)
                    })
                    .catch(error => {
                        loadingDiv.style.display = 'none';
                        resultsDiv.innerHTML = `<div class="alert alert-danger">Arama sÄ±rasÄ±nda bir hata oluÅŸtu: ${error.message}</div>`;
                        console.error('Search error:', error);
                    });
            }

            function displayResults(data) {
                if (!data.data || data.data.length === 0) {
                    resultsDiv.innerHTML = '<div class="alert alert-info">SonuÃ§ bulunamadÄ±.</div>';
                    return;
                }

                let html = '<div class="row">';

                data.data.forEach(item => {
                    const typeIcon = item.type === 'video' ? 'ðŸŽ¥' : 'ðŸ“„';
                    const typeBadge = item.type === 'video' ? 'bg-primary' : 'bg-secondary'; // Bootstrap 5 iÃ§in 'bg-' sÄ±nÄ±fÄ±

                    // Tarih formatlama (isteÄŸe baÄŸlÄ±, daha iyi gÃ¶rÃ¼nÃ¼m iÃ§in)
                    const formattedDate = item.publishedAt ? new Date(item.publishedAt.date || item.publishedAt).toLocaleDateString('tr-TR') : 'Bilinmiyor';

                    html += `
                        <div class="col-md-6 mb-3">
                            <div class="card h-100">
                                <div class="card-body">
                                    <div class="d-flex justify-content-between align-items-start mb-2">
                                        <h6 class="card-title">${typeIcon} ${item.title || 'BaÅŸlÄ±k Yok'}</h6>
                                        <div>
                                            <span class="badge ${typeBadge}">${item.type || 'Bilinmiyor'}</span>
                                            <span class="badge bg-success ms-1">Skor: ${parseFloat(item.finalScore).toFixed(2)}</span> {# 'item.score' yerine 'item.finalScore' #}
                                        </div>
                                    </div>
                                    <p class="card-text text-muted small">${(item.content || '').substring(0, 100)}...</p> {# Null kontrolÃ¼ eklendi #}
                                    <p class="card-text small">YayÄ±nlanma Tarihi: ${formattedDate}</p> {# Tarih eklendi #}
                                    <div class="row text-center mt-2">
                                        ${item.type === 'video' ? `
                                            <div class="col-6"><small><strong>${item.views || 0}</strong><br>GÃ¶rÃ¼ntÃ¼lenme</small></div>
                                            <div class="col-6"><small><strong>${item.likes || 0}</strong><br>BeÄŸeni</small></div>
                                        ` : `
                                            <div class="col-6"><small><strong>${item.readingTime || 0}</strong><br>Okuma SÃ¼resi</small></div> {# 'reading_time' yerine 'readingTime' #}
                                            <div class="col-6"><small><strong>${item.reactions || 0}</strong><br>Reaksiyon</small></div>
                                        `}
                                    </div>
                                    ${item.url ? `<a href="${item.url}" target="_blank" class="btn btn-sm btn-outline-primary mt-2">GÃ¶rÃ¼ntÃ¼le</a>` : ''}
                                </div>
                            </div>
                        </div>
                    `;
                });

                html += '</div>';
                resultsDiv.innerHTML = html;
            }

            // Sayfalama fonksiyonu (Ã¶rnek, tam implementasyon iÃ§in daha fazla kod gerekir)
            function setupPagination(meta) {
                const paginationNav = document.getElementById('pagination');
                const paginationUl = paginationNav.querySelector('ul');
                paginationUl.innerHTML = '';

                if (meta.pages <= 1) {
                    paginationNav.style.display = 'none';
                    return;
                }
                paginationNav.style.display = 'block';

                // Ã–nceki sayfa butonu
                paginationUl.innerHTML += `
                    <li class="page-item ${meta.page === 1 ? 'disabled' : ''}">
                        <a class="page-link" href="#" data-page="${meta.page - 1}">Ã–nceki</a>
                    </li>
                `;

                // Sayfa numaralarÄ±
                for (let i = 1; i <= meta.pages; i++) {
                    paginationUl.innerHTML += `
                        <li class="page-item ${meta.page === i ? 'active' : ''}">
                            <a class="page-link" href="#" data-page="${i}">${i}</a>
                        </li>
                    `;
                }

                // Sonraki sayfa butonu
                paginationUl.innerHTML += `
                    <li class="page-item ${meta.page === meta.pages ? 'disabled' : ''}">
                        <a class="page-link" href="#" data-page="${meta.page + 1}">Sonraki</a>
                    </li>
                `;

                // Sayfa butonlarÄ±na tÄ±klama olaylarÄ±
                paginationUl.querySelectorAll('.page-link').forEach(link => {
                    link.addEventListener('click', function(e) {
                        e.preventDefault();
                        const page = parseInt(this.dataset.page);
                        if (page > 0 && page <= meta.pages) {
                            currentPage = page;
                            performSearch();
                        }
                    });
                });
            }
        });
    </script>
{% endblock %}